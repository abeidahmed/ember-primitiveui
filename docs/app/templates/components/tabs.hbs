{{page-title "Tabs"}}

<ArticleContainer
  @title="Tabs"
  @description="Fully customizable tab interfaces with robust keyboard navigation and focus management that you can extend to create accessible tab components."
  @demoSrc="/examples/tabs"
>
  {{format-markdown
    '
## Usage

Tabs are built using the `tab`, `tab.List`, `tab.Item`, and `tab.Panel` components.

```hbs
<Tab as |tab|>
  <tab.List>
    <tab.Item @controls="panel-1">Tab 1</tab.Item>
    <tab.Item @controls="panel-2">Tab 2</tab.Item>
    <tab.Item @controls="panel-3">Tab 3</tab.Item>
  </tab.List>
  <div>
    <tab.Panel @id="panel-1">Panel 1</tab.Panel>
    <tab.Panel @id="panel-2">Panel 2</tab.Panel>
    <tab.Panel @id="panel-3">Panel 2</tab.Panel>
  </div>
</Tab>
```

## Styling the selected `tab.Item`

Each `tab.Item` component yields `selected` getter which is `true` when the `tab.Item` is selected, else `false`.

```diff
- <tab.Item @controls="panel-1">Tab 1</tab.Item>
+ <tab.Item @controls="panel-1" as |item|>
+   <span class="{{if item.selected "bg-indigo-600" "bg-white"}}">Tab 1</span>
+ </tab.Item>
```

## Disabling a `tab.Item`

Simply pass the `diabled` attribute to the component. Disabled tabs cannot be selected, and are also skipped when
navigating the tab list with the keyboard.

```diff
- <tab.Item @controls="panel-2"></tab.Item>
+ <tab.Item @controls="panel-1" disabled>Tab 1</tab.Item>
```

## Controlling the active `tab.Item`

Provide the `@defaultControls` and manage the state yourself.

```js
import Component from \'@glimmer/component\';
import { tracked } from \'@glimmer/tracking\';
import { action } from \'@ember/object\';

export default class MyTabComponent extends Component {
  @tracked defaultControls = \'panel-1\';

  @action onChange(id) {
    this.defaultControls = id;
  }
}
```

```hbs
<Tab @defaultControl={{this.defaultControls}} @onChange={{this.onChange}} as |tab|>
  <tab.List>
    <tab.Item @controls="panel-1">Tab 1</tab.Item>
    <tab.Item @controls="panel-2">Tab 2</tab.Item>
  </tab.List>
  <div>
    <tab.Panel @id="panel-1">Panel 1</tab.Panel>
    <tab.Panel @id="panel-2">Panel 2</tab.Panel>
  </div>
</Tab>
```

## Vertical tabs
If you\'ve styled your `tab.List` to appear vertically, simply pass the `@vertical={{true}}` argument. This will
set the `aria-orientation` attribute and will enable navigating with the up and down arrow keys instead of the left and
right.

```hbs
<Tab @vertical={{true}} as |tab|>
  <tab.List>
    <tab.Item @controls="panel-1">Tab 1</tab.Item>
    <tab.Item @controls="panel-2">Tab 2</tab.Item>
  </tab.List>
  <div>
    <tab.Panel @id="panel-1">Panel 1</tab.Panel>
    <tab.Panel @id="panel-2">Panel 2</tab.Panel>
  </div>
</Tab>
```

## Keyboard interactions

| Command      | Description |
| ---        |    ----   |
| `ArrowLeft`      | Selects the previous `tab.Item` when not vertical.       |
| `ArrowRight`   | Selects the next `tab.Item` when not vertical.        |
| `ArrowUp`   | Selects the previous `tab.Item` when vertical.        |
| `ArrowDown`   | Selects the next `tab.Item` when vertical.        |
| `Home`   | Selects the first `tab.Item`.        |
| `End`   | Selects the last `tab.Item`.        |

## Component API

### tab

| Argument      | Default | Description |
| ---        |    ----   | ---- |
| `as`   | `div`        | `string \| typeof Component` |
| `defaultControls`   | first `panelId`        | `string`. Default `panelId` to be selected at first. |
| `vertical`      | false       | `Boolean`. When true, the orientation of the `tab.List` will be `vertical`, otherwise it will be `horizontal`. |
| `onChange`   | -        | `(value: string) => void`. Called whenever the tab changes. |

### tab.List

| Argument      | Default | Description |
| ---        |    ----   | ---- |
| `as`   | `div`        | `string` |

### tab.Item

| Argument      | Default | Description |
| ---        |    ----   | ---- |
| `as`   | `button`        | `string` |
| `controls`   | -        | `string`. The `id` of the bounded panel. |

| Yields      | Description |
| ---        |   ---- |
| `selected`   |  `boolean`. Whether or not the `tab.Item` is currently selected. |

### tab.Panel

| Argument      | Default | Description |
| ---        |    ----   | ---- |
| `as`   | `div`        | `string` |
| `id`   | -        | `string`. |

| Yields      | Description |
| ---        |   ---- |
| `selected`   |  `boolean`. Whether or not the `tab.Panel` is currently selected. |
'
  }}
</ArticleContainer>
